{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pr\u00f3Siga - Sistema de Gerenciamento Acad\u00eamico","text":"<p>O Pr\u00f3Siga \u00e9 um sistema de gerenciamento acad\u00eamico completo projetado para facilitar a administra\u00e7\u00e3o de cursos, matr\u00edculas, notas e usu\u00e1rios em institui\u00e7\u00f5es de ensino.</p> <p>O Pr\u00f3Siga oferece uma solu\u00e7\u00e3o integrada para gest\u00e3o acad\u00eamica, atendendo \u00e0s necessidades de diferentes perfis de usu\u00e1rios:</p> <ul> <li>\ud83d\udc68\u200d\ud83c\udf93 Alunos: Matr\u00edcula em disciplinas, consulta de notas e hist\u00f3rico acad\u00eamico</li> <li>\ud83d\udc68\u200d\ud83c\udfeb Professores: Gerenciamento de turmas, lan\u00e7amento de notas e relat\u00f3rios</li> <li>\ud83d\udc68\u200d\ud83d\udcbc Administradores: Gest\u00e3o de usu\u00e1rios, per\u00edodos letivos e relat\u00f3rios gerenciais</li> </ul>"},{"location":"#funcionalidades-principais","title":"Funcionalidades Principais","text":""},{"location":"#gestao-de-usuarios","title":"Gest\u00e3o de Usu\u00e1rios","text":"<ul> <li>Cadastro de usu\u00e1rios via importa\u00e7\u00e3o CSV</li> <li>Sistema de login \u00fanico com direcionamento por perfil</li> <li>Recupera\u00e7\u00e3o de senha por email</li> <li>Controle de acesso e desativa\u00e7\u00e3o de contas</li> </ul>"},{"location":"#administracao-academica","title":"Administra\u00e7\u00e3o Acad\u00eamica","text":"<ul> <li>Gerenciamento de per\u00edodos letivos</li> <li>Cria\u00e7\u00e3o e administra\u00e7\u00e3o de turmas</li> <li>Matr\u00edculas manuais para casos excepcionais</li> <li>Relat\u00f3rios gerenciais completos</li> </ul>"},{"location":"#jornada-do-aluno","title":"Jornada do Aluno","text":"<ul> <li>Matr\u00edcula em disciplinas com valida\u00e7\u00e3o de pr\u00e9-requisitos</li> <li>Filtros avan\u00e7ados para sele\u00e7\u00e3o de disciplinas</li> <li>Consulta de notas em tempo real</li> <li>Exporta\u00e7\u00e3o de hist\u00f3rico acad\u00eamico em PDF</li> <li>Visualiza\u00e7\u00e3o de colegas de turma</li> <li>Solicita\u00e7\u00e3o de trancamento de disciplinas</li> </ul>"},{"location":"#jornada-do-professor","title":"Jornada do Professor","text":"<ul> <li>Visualiza\u00e7\u00e3o de turmas atribu\u00eddas</li> <li>Lan\u00e7amento e atualiza\u00e7\u00e3o de notas</li> <li>Exporta\u00e7\u00e3o de notas em planilha</li> <li>Gera\u00e7\u00e3o de di\u00e1rios de classe em PDF</li> </ul>"},{"location":"#arquitetura","title":"Arquitetura","text":"<p>O sistema segue o padr\u00e3o arquitetural MVC (Model-View-Controller), garantindo:</p>"},{"location":"#documentacao","title":"\ud83d\udcd6 Documenta\u00e7\u00e3o","text":"<p>Esta documenta\u00e7\u00e3o est\u00e1 organizada nas seguintes se\u00e7\u00f5es:</p> Se\u00e7\u00e3o Descri\u00e7\u00e3o Backlog Product backlog completo com \u00e9picos e user stories detalhadas Diagrama de Classes Diagrama l\u00f3gico do sistema Documenta\u00e7\u00e3o do Banco de Dados Estrutura do banco de dados"},{"location":"DB/","title":"Documenta\u00e7\u00e3o do Banco de Dados","text":"<p>Tanto o Modelo F\u00edsico, quanto o DDL foram gerados automaticamente pelo PGAdmin.</p>"},{"location":"DB/#modelo-fisico","title":"Modelo F\u00edsico","text":""},{"location":"DB/#ddl","title":"DDL","text":"<p><pre><code>BEGIN;\n\n\nCREATE TABLE IF NOT EXISTS public.avaliacoes_turma\n(\n    id serial NOT NULL,\n    nome character varying(100) COLLATE pg_catalog.\"default\" NOT NULL,\n    id_turma integer NOT NULL,\n    CONSTRAINT avaliacoes_turma_pkey PRIMARY KEY (id),\n    CONSTRAINT _turma_nome_uc UNIQUE (id_turma, nome)\n);\n\nCREATE TABLE IF NOT EXISTS public.avisos\n(\n    id serial NOT NULL,\n    titulo character varying(255) COLLATE pg_catalog.\"default\" NOT NULL,\n    conteudo text COLLATE pg_catalog.\"default\",\n    data_publicacao timestamp with time zone DEFAULT now(),\n    id_autor integer NOT NULL,\n    id_turma integer,\n    id_curso integer,\n    CONSTRAINT avisos_pkey PRIMARY KEY (id)\n);\n\nCREATE TABLE IF NOT EXISTS public.cursos\n(\n    id serial NOT NULL,\n    codigo character varying(20) COLLATE pg_catalog.\"default\" NOT NULL,\n    nome character varying(100) COLLATE pg_catalog.\"default\" NOT NULL,\n    CONSTRAINT cursos_pkey PRIMARY KEY (id),\n    CONSTRAINT cursos_codigo_key UNIQUE (codigo)\n);\n\nCREATE TABLE IF NOT EXISTS public.disciplinas\n(\n    id serial NOT NULL,\n    codigo character varying(20) COLLATE pg_catalog.\"default\" NOT NULL,\n    nome character varying(100) COLLATE pg_catalog.\"default\" NOT NULL,\n    descricao text COLLATE pg_catalog.\"default\",\n    semestre_ideal integer,\n    CONSTRAINT disciplinas_pkey PRIMARY KEY (id),\n    CONSTRAINT disciplinas_codigo_key UNIQUE (codigo)\n);\n\nCREATE TABLE IF NOT EXISTS public.matriculas\n(\n    id_aluno integer NOT NULL,\n    id_turma integer NOT NULL,\n    nota_final double precision,\n    status statusaprovacaoenum,\n    CONSTRAINT matriculas_pkey PRIMARY KEY (id_aluno, id_turma)\n);\n\nCREATE TABLE IF NOT EXISTS public.notas_avaliacoes\n(\n    id serial NOT NULL,\n    nota double precision,\n    id_avaliacao_turma integer NOT NULL,\n    id_matricula_aluno integer NOT NULL,\n    id_matricula_turma integer NOT NULL,\n    CONSTRAINT notas_avaliacoes_pkey PRIMARY KEY (id),\n    CONSTRAINT _aluno_avaliacao_uc UNIQUE (id_avaliacao_turma, id_matricula_aluno)\n);\n\nCREATE TABLE IF NOT EXISTS public.periodos_letivos\n(\n    id serial NOT NULL,\n    ano integer NOT NULL,\n    semestre integer NOT NULL,\n    inicio_matricula date,\n    fim_matricula date,\n    fim_trancamento date,\n    CONSTRAINT periodos_letivos_pkey PRIMARY KEY (id)\n);\n\nCREATE TABLE IF NOT EXISTS public.turmas\n(\n    id serial NOT NULL,\n    codigo character varying(20) COLLATE pg_catalog.\"default\" NOT NULL,\n    vagas integer NOT NULL,\n    horario character varying(100) COLLATE pg_catalog.\"default\",\n    local character varying(100) COLLATE pg_catalog.\"default\",\n    id_disciplina integer NOT NULL,\n    id_professor integer NOT NULL,\n    id_periodo_letivo integer NOT NULL,\n    CONSTRAINT turmas_pkey PRIMARY KEY (id),\n    CONSTRAINT turmas_codigo_key UNIQUE (codigo)\n);\n\nCREATE TABLE IF NOT EXISTS public.usuarios\n(\n    id serial NOT NULL,\n    cpf character varying(11) COLLATE pg_catalog.\"default\" NOT NULL,\n    nome character varying(100) COLLATE pg_catalog.\"default\" NOT NULL,\n    email character varying(100) COLLATE pg_catalog.\"default\",\n    senha_hash character varying(255) COLLATE pg_catalog.\"default\" NOT NULL,\n    status statuscontaenum,\n    tipo_usuario character varying(50) COLLATE pg_catalog.\"default\",\n    matricula character varying(20) COLLATE pg_catalog.\"default\",\n    id_curso integer,\n    CONSTRAINT usuarios_pkey PRIMARY KEY (id),\n    CONSTRAINT usuarios_matricula_key UNIQUE (matricula)\n);\n\nALTER TABLE IF EXISTS public.avaliacoes_turma\n    ADD CONSTRAINT avaliacoes_turma_id_turma_fkey FOREIGN KEY (id_turma)\n    REFERENCES public.turmas (id) MATCH SIMPLE\n    ON UPDATE NO ACTION\n    ON DELETE NO ACTION;\n\n\nALTER TABLE IF EXISTS public.avisos\n    ADD CONSTRAINT avisos_id_autor_fkey FOREIGN KEY (id_autor)\n    REFERENCES public.usuarios (id) MATCH SIMPLE\n    ON UPDATE NO ACTION\n    ON DELETE NO ACTION;\n\n\nALTER TABLE IF EXISTS public.avisos\n    ADD CONSTRAINT avisos_id_curso_fkey FOREIGN KEY (id_curso)\n    REFERENCES public.cursos (id) MATCH SIMPLE\n    ON UPDATE NO ACTION\n    ON DELETE NO ACTION;\n\n\nALTER TABLE IF EXISTS public.avisos\n    ADD CONSTRAINT avisos_id_turma_fkey FOREIGN KEY (id_turma)\n    REFERENCES public.turmas (id) MATCH SIMPLE\n    ON UPDATE NO ACTION\n    ON DELETE NO ACTION;\n\n\nALTER TABLE IF EXISTS public.matriculas\n    ADD CONSTRAINT matriculas_id_aluno_fkey FOREIGN KEY (id_aluno)\n    REFERENCES public.usuarios (id) MATCH SIMPLE\n    ON UPDATE NO ACTION\n    ON DELETE NO ACTION;\n\n\nALTER TABLE IF EXISTS public.matriculas\n    ADD CONSTRAINT matriculas_id_turma_fkey FOREIGN KEY (id_turma)\n    REFERENCES public.turmas (id) MATCH SIMPLE\n    ON UPDATE NO ACTION\n    ON DELETE NO ACTION;\n\n\nALTER TABLE IF EXISTS public.notas_avaliacoes\n    ADD CONSTRAINT notas_avaliacoes_id_avaliacao_turma_fkey FOREIGN KEY (id_avaliacao_turma)\n    REFERENCES public.avaliacoes_turma (id) MATCH SIMPLE\n    ON UPDATE NO ACTION\n    ON DELETE NO ACTION;\n\n\nALTER TABLE IF EXISTS public.notas_avaliacoes\n    ADD CONSTRAINT notas_avaliacoes_id_matricula_aluno_id_matricula_turma_fkey FOREIGN KEY (id_matricula_aluno, id_matricula_turma)\n    REFERENCES public.matriculas (id_aluno, id_turma) MATCH SIMPLE\n    ON UPDATE NO ACTION\n    ON DELETE NO ACTION;\n\n\nALTER TABLE IF EXISTS public.turmas\n    ADD CONSTRAINT turmas_id_disciplina_fkey FOREIGN KEY (id_disciplina)\n    REFERENCES public.disciplinas (id) MATCH SIMPLE\n    ON UPDATE NO ACTION\n    ON DELETE NO ACTION;\n\n\nALTER TABLE IF EXISTS public.turmas\n    ADD CONSTRAINT turmas_id_professor_fkey FOREIGN KEY (id_professor)\n    REFERENCES public.usuarios (id) MATCH SIMPLE\n    ON UPDATE NO ACTION\n    ON DELETE NO ACTION;\n\n\nALTER TABLE IF EXISTS public.turmas\n    ADD FOREIGN KEY (id_periodo_letivo)\n    REFERENCES public.periodos_letivos (id) MATCH SIMPLE\n    ON UPDATE NO ACTION\n    ON DELETE NO ACTION\n    NOT VALID;\n\n\nALTER TABLE IF EXISTS public.usuarios\n    ADD CONSTRAINT usuarios_id_curso_fkey FOREIGN KEY (id_curso)\n    REFERENCES public.cursos (id) MATCH SIMPLE\n    ON UPDATE NO ACTION\n    ON DELETE NO ACTION;\n\nEND;\n</code></pre> Para visualizar o arquivo SQL com o DDL: clique aqui</p>"},{"location":"backlog/","title":"Product Backlog","text":"<p>O backlog do sistema foi organizado em \u00e9picos, que representam grandes blocos de funcionalidades. Cada \u00e9pico \u00e9 composto por hist\u00f3rias de usu\u00e1rio (US), que descrevem de forma detalhada as necessidades dos diferentes perfis (aluno, professor, administrador e novo usu\u00e1rio).</p>"},{"location":"backlog/#epico-gestao-de-usuarios-e-acesso","title":"\u00c9pico: Gest\u00e3o de Usu\u00e1rios e Acesso","text":"ID Hist\u00f3ria de Usu\u00e1rio Status Observa\u00e7\u00f5es US-001 Como novo usu\u00e1rio (Aluno, Professor, Coordenador), quero realizar meu primeiro acesso informando meu CPF, e-mail e definindo uma senha, para que eu possa aceder \u00e0s funcionalidades adequadas ao meu papel. Feito Endpoint <code>/usuarios/primeiro-acesso</code> implementado e generalizado para todos os tipos de usu\u00e1rio. US-002 Como usu\u00e1rio cadastrado, quero aceder ao sistema atrav\u00e9s de uma tela de login \u00fanica (usando e-mail e senha), para que ap\u00f3s a autentica\u00e7\u00e3o eu seja automaticamente direcionado para minha \u00e1rea correspondente. Feito Implementado no servi\u00e7o <code>prosiga-login</code> (<code>POST /login</code>). O <code>prosiga-backend</code> valida o token via <code>deps.py</code>. US-003 ~~Como aluno em primeiro acesso, quero que o sistema gere automaticamente minha matr\u00edcula \u00fanica e sequencial...~~ Removido L\u00f3gica alterada. Matr\u00edcula \u00e9 pr\u00e9-cadastrada via CSV (US-005). US-004 Como usu\u00e1rio, quero recuperar minha senha atrav\u00e9s do meu e-mail cadastrado, para que eu possa restabelecer o acesso quando esquecer minhas credenciais. A Fazer Implementa\u00e7\u00e3o adiada. Requer configura\u00e7\u00e3o de servi\u00e7o de envio de e-mail e l\u00f3gica de token. US-005 Como administrador (Coordenador), quero cadastrar novos usu\u00e1rios (Aluno, Professor, Coordenador) importando um arquivo CSV com seus dados (incluindo <code>codigo_curso</code> para alunos), para que apenas usu\u00e1rios pr\u00e9-cadastrados possam realizar o primeiro acesso. Feito Endpoint <code>POST /usuarios/upload-csv</code> implementado e protegido para Coordenadores. L\u00ea <code>codigo_curso</code>. US-006 Como administrador (Coordenador), quero desativar contas de usu\u00e1rios no sistema (exceto a pr\u00f3pria), para controlar o acesso e manter a seguran\u00e7a quando necess\u00e1rio. Feito Endpoint <code>PATCH /usuarios/{cpf}/desativar</code> implementado. US-101 Como Aluno, quero visualizar meu \u00cdndice de Rendimento Acad\u00eamico (IRA) simplificado (m\u00e9dia das notas finais 0-10 convertida para 0-5, come\u00e7ando em 5.0), para acompanhar meu desempenho geral. Feito Endpoint <code>GET /usuarios/me/ira</code> implementado. C\u00e1lculo no <code>MatriculaRepository</code>. US-102 Como Aluno, quero visualizar uma estimativa do semestre atual (contagem de per\u00edodos letivos distintos no hist\u00f3rico), para ter refer\u00eancia do meu progresso. Feito Endpoint <code>GET /usuarios/me/semestre-atual</code> implementado. C\u00e1lculo no <code>MatriculaRepository</code>."},{"location":"backlog/#epico-jornada-administrativa","title":"\u00c9pico: Jornada Administrativa","text":"ID Hist\u00f3ria de Usu\u00e1rio Status Observa\u00e7\u00f5es US-009 Como administrador (Coordenador), quero gerenciar per\u00edodos letivos (criar, editar, listar, excluir), definindo datas de in\u00edcio/fim de matr\u00edcula e trancamento, para organizar e controlar os ciclos acad\u00eamicos. Feito CRUD implementado em <code>/periodos-letivos</code>. US-010 Como administrador (Coordenador), quero criar, editar, listar e excluir turmas por per\u00edodo letivo, definindo c\u00f3digo, disciplina, professor respons\u00e1vel, n\u00famero de vagas, hor\u00e1rio e local, para disponibilizar disciplinas aos alunos. Feito CRUD implementado em <code>/turmas</code>. US-011 Como administrador (Coordenador), quero matricular alunos manualmente em turmas (identificando o aluno por matr\u00edcula), mesmo quando h\u00e1 restri\u00e7\u00f5es de vagas, para resolver casos excepcionais. Feito Endpoint <code>POST /matriculas/admin/matricular</code> implementado. Ignora limite de vagas. US-012 Como administrador (Coordenador), quero gerar relat\u00f3rios gerenciais em PDF (Ocupa\u00e7\u00e3o de Vagas por per\u00edodo, Turmas por Professor por per\u00edodo, Hist\u00f3rico de Aluno por matr\u00edcula, Lista de Alunos por Curso), para monitorar e acompanhar o funcionamento do sistema acad\u00eamico. Feito Relat\u00f3rios implementados. Altera\u00e7\u00e3o no modelo Aluno para adicionar <code>id_curso</code>. US-026 Como administrador (Coordenador), quero criar, editar, visualizar e excluir avisos gerais para um curso espec\u00edfico, para comunicar informa\u00e7\u00f5es importantes aos alunos daquele curso. Feito CRUD implementado em <code>/avisos/curso</code> e endpoints gen\u00e9ricos <code>/avisos/{id_aviso}</code> (PUT/DELETE) protegidos para Coordenador/Professor."},{"location":"backlog/#epico-jornada-do-aluno","title":"\u00c9pico: Jornada do Aluno","text":"ID Hist\u00f3ria de Usu\u00e1rio Status Observa\u00e7\u00f5es US-018 Como aluno, quero visualizar as turmas dispon\u00edveis (filtrando por per\u00edodo letivo, semestre ideal da disciplina) e buscar turmas pelo c\u00f3digo da disciplina, para facilitar o planeamento e escolhas de matr\u00edcula. Feito Endpoint <code>GET /turmas</code> implementado com filtros. Modelo <code>Disciplina</code> atualizado com <code>semestre_ideal</code> e <code>descricao</code>. <code>eh_obrigatoria</code> removido. US-019 Como aluno, quero me matricular em turmas do per\u00edodo letivo atual, respeitando disponibilidade de vagas e n\u00e3o me matriculando na mesma disciplina duas vezes no per\u00edodo. Feito Endpoint <code>POST /matriculas</code> implementado com as valida\u00e7\u00f5es. Limite de 7 matr\u00edculas removido do backend (responsabilidade do frontend). US-022 Como aluno, quero visualizar minhas matr\u00edculas atuais (incluindo status e notas parciais/finais), para acompanhar meu desempenho. Feito Endpoint <code>GET /matriculas/me</code> implementado. Retorna <code>MatriculaResponse</code> com <code>notas_avaliacoes</code>. US-021 Como aluno, quero exportar meu hist\u00f3rico acad\u00eamico completo em formato PDF (incluindo semestre atual estimado e IRA), para ter um documento oficial. Feito Endpoint <code>GET /usuarios/me/historico-pdf</code> implementado. Usa <code>reportlab</code>. US-023 Como aluno, quero visualizar a lista de colegas (nome e matr\u00edcula) matriculados na mesma turma que eu, para conhecer minha turma. Feito Endpoint <code>GET /turmas/{id_turma}/colegas</code> implementado. US-024 Como aluno, quero solicitar trancamento de disciplinas (alterar status da matr\u00edcula para TRANCADO) dentro do prazo definido no per\u00edodo letivo, para reorganizar minha carga hor\u00e1ria. Feito Endpoint <code>PATCH /matriculas/{id_turma}/trancar</code> implementado com valida\u00e7\u00e3o de prazo. US-027 Como aluno, quero visualizar avisos das minhas turmas e do meu curso, para me manter atualizado. Feito Endpoints <code>GET /avisos/turma/{id_turma}</code> e <code>GET /avisos/curso/{id_curso}</code> implementados."},{"location":"backlog/#epico-jornada-do-docente","title":"\u00c9pico: Jornada do Docente","text":"ID Hist\u00f3ria de Usu\u00e1rio Status Observa\u00e7\u00f5es US-013 Como professor, quero visualizar exclusivamente as turmas sob minha responsabilidade no per\u00edodo letivo atual, para focar no gerenciamento das minhas disciplinas. Feito Endpoint <code>GET /turmas/me</code> implementado e corrigido para filtrar pelo per\u00edodo atual. US-015 Como professor, quero lan\u00e7ar e atualizar as notas das avalia\u00e7\u00f5es (criando \"colunas\" de avalia\u00e7\u00e3o por turma) e a nota final/status dos alunos das minhas turmas (identificando o aluno por matr\u00edcula), para registar o desempenho. Feito Refatora\u00e7\u00e3o completa da l\u00f3gica de notas (AvaliacaoTurma, NotaAvaliacao). Endpoints implementados em <code>/turmas</code> e <code>/matriculas</code>. US-016 Como professor, quero exportar as notas dos meus alunos (incluindo avalia\u00e7\u00f5es parciais, nota final e status) em formato de planilha (CSV), para facilitar an\u00e1lises. Feito Endpoint <code>GET /turmas/{id_turma}/exportar-csv</code> implementado. US-017 Como professor, quero gerar um di\u00e1rio de classe em PDF contendo notas (parciais, final) e status dos alunos por turma, para ter um relat\u00f3rio consolidado. Feito Endpoint <code>GET /turmas/{id_turma}/diario-pdf</code> implementado. Usa <code>reportlab</code>. US-025 Como professor, quero criar, editar, visualizar e excluir avisos espec\u00edficos para minhas turmas, para manter os alunos informados. Feito CRUD implementado em <code>/avisos/turma</code> e endpoints gen\u00e9ricos <code>/avisos/{id_aviso}</code> (PUT/DELETE) protegidos para Professor."},{"location":"diagrama/","title":"Diagrama de Classes","text":"<p>Este diagrama descreve as principais entidades do sistema, seus atributos, relacionamentos e especializa\u00e7\u00f5es. Ele evidencia como os elementos fundamentais se relacionam entre si.  </p>"}]}